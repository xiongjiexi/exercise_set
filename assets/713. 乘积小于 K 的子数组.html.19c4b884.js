import{_ as t,o as e,c as p,b as n,d as o,e as s,a as c,r as l}from"../app.99e1ebfc.mjs";const i={},u=n("h1",{id:"_713-\u4E58\u79EF\u5C0F\u4E8E-k-\u7684\u5B50\u6570\u7EC4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_713-\u4E58\u79EF\u5C0F\u4E8E-k-\u7684\u5B50\u6570\u7EC4","aria-hidden":"true"},"#"),s(" 713. \u4E58\u79EF\u5C0F\u4E8E K \u7684\u5B50\u6570\u7EC4")],-1),r=s("\u540C"),k={href:"https://leetcode.cn/problems/ZVAVXX/",target:"_blank",rel:"noopener noreferrer"},d=s("\u5251\u6307 Offer II 009. \u4E58\u79EF\u5C0F\u4E8E K \u7684\u5B50\u6570\u7EC4"),v=c(`<h2 id="approach-1-\u524D\u7F00\u79EF" tabindex="-1"><a class="header-anchor" href="#approach-1-\u524D\u7F00\u79EF" aria-hidden="true">#</a> Approach 1\uFF0C\u524D\u7F00\u79EF</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numSubarrayProductLessThanK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> multi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            multi <span class="token operator">=</span> multi <span class="token operator">*</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>multi <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cnt <span class="token operator">+=</span> right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                right<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                multi <span class="token operator">=</span> multi <span class="token operator">/</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    right<span class="token operator">++</span><span class="token punctuation">;</span>
                    left<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    left<span class="token operator">++</span><span class="token punctuation">;</span>
                    multi <span class="token operator">=</span> multi <span class="token operator">/</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>       
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function m(b,_){const a=l("ExternalLinkIcon");return e(),p("div",null,[u,n("blockquote",null,[n("p",null,[r,n("a",k,[d,o(a)])])]),v])}const f=t(i,[["render",m],["__file","713. \u4E58\u79EF\u5C0F\u4E8E K \u7684\u5B50\u6570\u7EC4.html.vue"]]);export{f as default};
