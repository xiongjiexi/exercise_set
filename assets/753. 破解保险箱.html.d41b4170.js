import{_ as n,o as s,c as a,a as p}from"../app.99e1ebfc.mjs";const t={},o=p(`<h1 id="_753-\u7834\u89E3\u4FDD\u9669\u7BB1" tabindex="-1"><a class="header-anchor" href="#_753-\u7834\u89E3\u4FDD\u9669\u7BB1" aria-hidden="true">#</a> 753. \u7834\u89E3\u4FDD\u9669\u7BB1</h1><h2 id="\u6B27\u62C9\u56DE\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u6B27\u62C9\u56DE\u8DEF" aria-hidden="true">#</a> \u6B27\u62C9\u56DE\u8DEF</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">crackSafe</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> edgeNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> nodeNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5B58\u50A8\u8282\u70B9\u5DF2\u7ECF\u9009\u62E9\u7684\u6700\u5C0F\u6570\u503C \u4E0B\u4E00\u4E2A\u53EF\u4EE5\u9009\u62E9\u7684\u6570\u503C\u662F\u5176\u51CF1</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nodeNum<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u521D\u59CB\u5316\u503C\u4E3Ak \u4E0B\u4E00\u4E2A\u53EF\u9009\u62E9\u7684\u6570\u503C\u4E3Ak-1</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>vals<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u904D\u5386\u6240\u6709\u8FB9</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> edgeNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token operator">--</span>vals<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u53BB\u9664\u6700\u9AD8\u4F4D\u52A0\u5165\u65B0\u7684\u4E00\u4F4D\u540E\u8282\u70B9\u7684\u503C</span>
            idx <span class="token operator">=</span> <span class="token punctuation">(</span>idx <span class="token operator">*</span> k <span class="token operator">+</span> e<span class="token punctuation">)</span> <span class="token operator">%</span> nodeNum<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(t,[["render",c],["__file","753. \u7834\u89E3\u4FDD\u9669\u7BB1.html.vue"]]);export{k as default};
