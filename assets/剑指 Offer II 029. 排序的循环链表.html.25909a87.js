import{_ as n,o as s,c as a,a as e}from"../app.99e1ebfc.mjs";const p={},t=e(`<h1 id="\u5251\u6307-offer-ii-029-\u6392\u5E8F\u7684\u5FAA\u73AF\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-029-\u6392\u5E8F\u7684\u5FAA\u73AF\u94FE\u8868" aria-hidden="true">#</a> \u5251\u6307 Offer II 029. \u6392\u5E8F\u7684\u5FAA\u73AF\u94FE\u8868</h1><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> insertVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>insertVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span>next <span class="token operator">=</span> res<span class="token punctuation">;</span>
            <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">Node</span> res <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token class-name">Node</span> first <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>insertVal <span class="token operator">&gt;=</span> head<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> insertVal <span class="token operator">&lt;=</span> next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> head <span class="token operator">==</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Node</span> insert <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>insertVal<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
                head<span class="token punctuation">.</span>next <span class="token operator">=</span> insert<span class="token punctuation">;</span>
                success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                first <span class="token operator">=</span> next<span class="token punctuation">;</span>
                last <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            head <span class="token operator">=</span> next<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success <span class="token operator">&amp;&amp;</span> first <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span> insert <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>insertVal<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>
            last<span class="token punctuation">.</span>next <span class="token operator">=</span> insert<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span> insert <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>insertVal<span class="token punctuation">,</span> head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
            head<span class="token punctuation">.</span>next <span class="token operator">=</span> insert<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","\u5251\u6307 Offer II 029. \u6392\u5E8F\u7684\u5FAA\u73AF\u94FE\u8868.html.vue"]]);export{r as default};
