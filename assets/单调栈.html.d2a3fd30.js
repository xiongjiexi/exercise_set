import{_ as e,o,c,b as n,d as a,a as p,e as t,r as l}from"../app.99e1ebfc.mjs";const i={},u=p('<h1 id="\u5355\u8C03\u6808" tabindex="-1"><a class="header-anchor" href="#\u5355\u8C03\u6808" aria-hidden="true">#</a> \u5355\u8C03\u6808</h1><h2 id="\u5355\u8C03\u6808\u7528\u4E8E\u89E3\u51B3\u54EA\u7C7B\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u5355\u8C03\u6808\u7528\u4E8E\u89E3\u51B3\u54EA\u7C7B\u95EE\u9898" aria-hidden="true">#</a> \u5355\u8C03\u6808\u7528\u4E8E\u89E3\u51B3\u54EA\u7C7B\u95EE\u9898</h2><ol><li>\u901A\u5E38\u7528\u4E8E\u89E3\u51B3\u627E\u4E00\u4E2A\u5143\u7D20\u5DE6\u53F3\u4E24\u904D\u7684\u6700\u5927\u3001\u6700\u5C0F\u503C</li><li>\u4E5F\u53EF\u4EE5\u7528\u4E8E\u627E\u5230\u6BCF\u4E2A\u5143\u7D20\u4F5C\u4E3A\u96C6\u5408\u4E2D\u6700\u5927\u503C\u3001\u6700\u5C0F\u503C\u7684\u8FB9\u754C\u8303\u56F4</li></ol><h2 id="\u5355\u8C03\u6808\u9898\u6C47\u603B" tabindex="-1"><a class="header-anchor" href="#\u5355\u8C03\u6808\u9898\u6C47\u603B" aria-hidden="true">#</a> \u5355\u8C03\u6808\u9898\u6C47\u603B</h2>',4),k={href:"https://leetcode.cn/problems/next-greater-element-i/",target:"_blank",rel:"noopener noreferrer"},r=t("496. \u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20 I"),d={href:"https://leetcode.cn/problems/next-greater-element-ii/",target:"_blank",rel:"noopener noreferrer"},m=t("503. \u4E0B\u4E00\u4E2A\u66F4\u5927\u5143\u7D20 II"),v=p(`<h2 id="\u6C42\u5DE6\u8FB9\u6700\u5927\u503C" tabindex="-1"><a class="header-anchor" href="#\u6C42\u5DE6\u8FB9\u6700\u5927\u503C" aria-hidden="true">#</a> \u6C42\u5DE6\u8FB9\u6700\u5927\u503C</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// \u7528\u4E8E\u5B58\u50A8\u5DE6\u8FB9\u6700\u5927\u503C\u7684\u6570\u7EC4</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> max <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> p <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6C42\u53F3\u8FB9\u6700\u5927\u503C" tabindex="-1"><a class="header-anchor" href="#\u6C42\u53F3\u8FB9\u6700\u5927\u503C" aria-hidden="true">#</a> \u6C42\u53F3\u8FB9\u6700\u5927\u503C</h2><p>\u4E0E\u6C42\u5DE6\u8FB9\u7684\u6700\u5927\u503C\u533A\u522B\u5728\u4E8E\uFF0C\u904D\u5386\u7684\u65B9\u5411\u53D8\u4E86\uFF0C\u5176\u4F59\u90FD\u662F\u4E00\u6837\u7684\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// \u7528\u4E8E\u5B58\u50A8\u53F3\u8FB9\u6700\u5927\u503C\u7684\u6570\u7EC4</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> max <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> p <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6C42\u4E00\u4E2A\u6570\u7684\u5DE6\u53F3\u4E24\u8FB9\u7684\u6700\u5927\u503C" tabindex="-1"><a class="header-anchor" href="#\u6C42\u4E00\u4E2A\u6570\u7684\u5DE6\u53F3\u4E24\u8FB9\u7684\u6700\u5927\u503C" aria-hidden="true">#</a> \u6C42\u4E00\u4E2A\u6570\u7684\u5DE6\u53F3\u4E24\u8FB9\u7684\u6700\u5927\u503C</h2><h2 id="\u6C42\u4E00\u4E2A\u6570\u7684\u5DE6\u53F3\u4E24\u8FB9\u7684\u6700\u5C0F\u503C" tabindex="-1"><a class="header-anchor" href="#\u6C42\u4E00\u4E2A\u6570\u7684\u5DE6\u53F3\u4E24\u8FB9\u7684\u6700\u5C0F\u503C" aria-hidden="true">#</a> \u6C42\u4E00\u4E2A\u6570\u7684\u5DE6\u53F3\u4E24\u8FB9\u7684\u6700\u5C0F\u503C</h2><h2 id="\u6570\u7EC4\u5B9E\u73B0\u6808" tabindex="-1"><a class="header-anchor" href="#\u6570\u7EC4\u5B9E\u73B0\u6808" aria-hidden="true">#</a> \u6570\u7EC4\u5B9E\u73B0\u6808</h2><ol><li>\u4F7F\u7528\u6570\u7EC4\u6784\u5EFA\u5355\u8C03\u6808<code>int[]\xA0stack\xA0=\xA0new int[n];</code></li><li>\u5B9A\u4E49\u6808\u9876\u6307\u9488<code>int pop = -1;</code></li><li>\u6808\u4E0D\u4E3A\u7A7A\uFF1A<code>pop &gt;= 0</code></li><li>\u5165\u6808\uFF1A<code>stack[++pop] = i</code></li><li>\u51FA\u6808\uFF1A<code>int p = stack[pop--]</code></li></ol><p>\u4EE3\u7801\u793A\u4F8B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElements</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6808\u9876\u6307\u9488</span>
        <span class="token keyword">int</span> pop <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>pop <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>pop<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> min <span class="token operator">=</span> stack<span class="token punctuation">[</span>pop<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                res<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            stack<span class="token punctuation">[</span><span class="token operator">++</span>pop<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function b(h,w){const s=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",k,[r,a(s)])]),n("p",null,[n("a",d,[m,a(s)])]),v])}const f=e(i,[["render",b],["__file","\u5355\u8C03\u6808.html.vue"]]);export{f as default};
