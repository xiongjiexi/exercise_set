import{_ as p,o as t,c as e,b as n,d as o,e as s,a as c,r as i}from"../app.99e1ebfc.mjs";const l="/exercise_set/assets/\u6811\u72B6\u6570\u7EC4\u7684\u6811\u5F62\u56FE.40b7e8f4.png",u="/exercise_set/assets/\u6811\u72B6\u6570\u7EC4\u521D\u59CB\u5316\u8FC7\u7A0B\u56FE.859065be.png",k={},d=n("h1",{id:"\u6811\u72B6\u6570\u7EC4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u6811\u72B6\u6570\u7EC4","aria-hidden":"true"},"#"),s(" \u6811\u72B6\u6570\u7EC4")],-1),r=s("\u200B "),v={href:"https://mp.weixin.qq.com/s/XKbKl87fN5idaqyGeQr2DQ",target:"_blank",rel:"noopener noreferrer"},m=s("\u53C2\u8003\u6587\u7AE0"),b=c('<p>\u5047\u5B9A\u539F\u6570\u7EC4</p><p><code>{2, 1, 1, 3, 2, 3, 4, 5, 6, 7, 8, 9}</code>\uFF0C</p><p>\u53EF\u4EE5\u5F97\u5230\u5BF9\u5E94\u7684\u6811\u72B6\u6570\u7EC4</p><p><code>{0, 2, 3, 1, 7, 2, 5, 4, 21, 6, 13, 8, 30}</code>\u3002</p><p>\u6811\u72B6\u6570\u7EC4\u7684\u6811\u5F62\u56FE\u5982\u4E0B</p><p><img src="'+l+'" alt="\u6811\u72B6\u6570\u7EC4\u7684\u6811\u5F62\u56FE"></p><p>\u6811\u72B6\u6570\u7EC4\u521D\u59CB\u5316\u8FC7\u7A0B\u56FE\u5982\u4E0B</p><p><img src="'+u+`" alt="\u6811\u72B6\u6570\u7EC4\u521D\u59CB\u5316\u8FC7\u7A0B\u56FE"></p><ol><li><code>index &amp; -index</code>\u80FD\u83B7\u53D6<code>index</code>\u7684\u4E8C\u8FDB\u5236\u4E0A\u6700\u540E\u4E00\u4E2A<code>1</code>\uFF0C\u4E5F\u5C31\u662F<code>lowbit(index)</code>\u7684\u8BA1\u7B97\u8FC7\u7A0B <ol><li>\u5B83\u4EE3\u8868<code>bit[i]</code>\u7684\u503C\u662F\u5411\u524D\u7D2F\u52A0<code>lowbit(i)</code>\u4E2A\u5143\u7D20</li><li>\u4F8B\u5982<code>bit[10] = 13</code>\uFF0C<code>lowbit(10) = 2</code>\uFF0C\u539F\u6570\u7EC4<code>arr[9] + arr[10] = 13</code></li></ol></li><li>\u901A\u8FC7<code>index + (index &amp; -index)</code>\u786E\u5B9A\u8981\u66F4\u65B0\u7684\u4E0B\u4E00\u4E2A\u8282\u70B9 <ol><li>\u4F8B\u5982<code>index = 1</code>\uFF0C\u4E0B\u4E00\u4E2A\u8282\u70B9\u4F9D\u6B21\u4E3A<code>2, 4, 8</code></li><li><code>index = 3</code>\uFF0C\u4E0B\u4E00\u4E2A\u8282\u70B9\u4F9D\u6B21\u4E3A<code>3, 4, 8</code></li></ol></li><li>\u4ECE\u6811\u5F62\u56FE\u53EF\u4EE5\u770B\u51FA\uFF0Cbit[y]\u7684\u5B50\u8282\u70B9bit[x]\u8868\u793A\u7684\u662Farr[y, x)\u7684\u7D2F\u52A0\u548C <ol><li>\u4F8B\u5982<code>bit[12] = 30 = arr[8, 12) = 6 + 7 + 8 + 9</code></li></ol></li><li>\u901A\u8FC7<code>index - (index &amp; -index)</code>\u80FD\u83B7\u53D6<code>index</code>\u4E0B\u6807\u8282\u70B9\u7684\u7236\u8282\u70B9\uFF0C\u4E5F\u5C31\u662F\u9700\u8981\u7D2F\u52A0\u7684\u524D\u7F00\u548C <ol><li>\u4F8B\u5982index = 11\uFF0C\u7236\u8282\u70B9\u4F9D\u6B21\u662F<code>11-0=11,\xA011-1=10,\xA010-2=8</code></li><li>\u4E00\u4E2A\u4F9D\u636E\u662F\uFF1A<strong>\u4EFB\u4F55\u4E00\u4E2A\u6B63\u6574\u6570\u90FD\u53EF\u4EE5\u88AB\u8868\u793A\u4E3A<code>2\u7684\u6B21\u5E42\u548C</code>\uFF0C\u4F8B\u5982<code>11 = 8 + 2 + 1</code></strong></li></ol></li></ol><p>\u6811\u72B6\u6570\u7EC4\u6A21\u677F\u4EE3\u7801</p><p>\u6709\u6CE8\u91CA\u7248\u672C</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NumArray</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bit<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">NumArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        bit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5148\u5C06\u539F\u503C\u7D2F\u52A0\u5230bit\u6811\u72B6\u6570\u7EC4\u4E2D</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bit<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		
        <span class="token comment">// \u518D\u8BA1\u7B97lowbit\uFF0C\u5C06\u539F\u6570\u7EC4\u7684\u6BCF\u4E2A\u503C\u7D2F\u52A0\u5230lowbit\u4E0A</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                bit<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> bit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u521D\u59CB\u5316\u7248\u672C2</span>
    <span class="token keyword">public</span> <span class="token class-name">NumArray0</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        bit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8C03\u7528\u66F4\u65B0\u503C\u7684\u65B9\u5F0F\u521D\u59CB\u5316</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">update0</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// val\u4E3A\u53D8\u66F4\u503C\uFF0C\u56E0\u6B64\u9700\u8981\u5148\u83B7\u53D6\u5230\u539F\u5740\uFF0C\u53D8\u66F4\u65F6\u5148\u51CF\u53BB\u539F\u503C</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> old <span class="token operator">=</span> <span class="token function">sumRange</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        index <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> bit<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bit<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> val <span class="token operator">-</span> old<span class="token punctuation">;</span>
            index <span class="token operator">+=</span> <span class="token punctuation">(</span>index <span class="token operator">&amp;</span> <span class="token operator">-</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// update\u7684\u7B80\u5316\u7248</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> old <span class="token operator">=</span> <span class="token function">sumRange</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">update0</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> val <span class="token operator">-</span> old<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
   <span class="token comment">// val\u4E3A\u8FFD\u52A0\u503C</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update0</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        index <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> bit<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bit<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>
            index <span class="token operator">+=</span> <span class="token punctuation">(</span>index <span class="token operator">&amp;</span> <span class="token operator">-</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u901A\u8FC7\u524D\u7F00\u548C\u8BA1\u7B97\u8303\u56F4\u503C</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">preSum</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">preSum</span><span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">preSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u56E0\u4E3Abit\u6570\u7EC4\u6BD4\u539F\u6570\u7EC4\u957F\u5EA6\u591A1</span>
        index <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u7D2F\u52A0\u83B7\u5F97\u524D\u7F00\u548C</span>
            res <span class="token operator">+=</span> bit<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// \u5F97\u5230\u7236\u8282\u70B9\u7684\u4E0B\u6807</span>
            index <span class="token operator">-=</span> <span class="token punctuation">(</span>index <span class="token operator">&amp;</span> <span class="token operator">-</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7EAF\u51C0\u7248\u672C</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NumArray</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bit<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">NumArray0</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        bit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">update0</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> old <span class="token operator">=</span> <span class="token function">sumRange</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">update0</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> val <span class="token operator">-</span> old<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update0</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        index <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> bit<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bit<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>
            index <span class="token operator">+=</span> <span class="token punctuation">(</span>index <span class="token operator">&amp;</span> <span class="token operator">-</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">preSum</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">preSum</span><span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">preSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        index <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">+=</span> bit<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
            index <span class="token operator">-=</span> <span class="token punctuation">(</span>index <span class="token operator">&amp;</span> <span class="token operator">-</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function w(y,x){const a=i("ExternalLinkIcon");return t(),e("div",null,[d,n("p",null,[r,n("a",v,[m,o(a)])]),b])}const _=p(k,[["render",w],["__file","\u6811\u72B6\u6570\u7EC4.html.vue"]]);export{_ as default};
